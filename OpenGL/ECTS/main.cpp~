#pragma once

// Standard
#include <iostream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>

// OpenGL extensions
#include "glew.h"
#include "glfw3.h"
#include <GL/gl.h>
#include "glm.hpp"
#include "gtc/type_ptr.hpp"
#include "gtc/matrix_transform.hpp"
#include <memory>


#include "Texture.h"
#include "Geometry.h"
#include "SceneObject.h"
#include "PointLight.h"
#include "Light.h"
#include "Triangle.h"
#include "Player.h"
#include "Student.h"
#include "Plane.h"
#include "../Scene/Camera.h"
#include "../Shader/Shader.h"
#include "../Shader/BlinnPhongShader.h"
#include "../Shader/NormalShader.h"
#include "../Shader/TextureShader.h"
#include "SceneImporter.h"
#include "SceneObjectManager.h"
#include "Physics.h"

using namespace std;
using namespace glm;

void init(GLFWwindow* window);
void update(GLFWwindow* window,float deltaTime);
void draw();
void initScreenParameters(int argc, char** argv);
void cleanup();

int width = 800;
int height = 600;
int refreshrate = 60;
bool fullscreen = false;
int key = 0;

TextureShader* tex_shader;

vector<shared_ptr<Knowledge>> k_items;
vector<shared_ptr<Energy>> e_items;
vector<shared_ptr<Student>> students;
vector<shared_ptr<Environment>> environment;
Plane* demo_plane;

PointLight* light;
Camera* camera;
mat4 view_proj;

Player* player;
bool energy_out = false;
bool time_out = false;
unsigned int min_ECTS = 5;

Physics physics;
SceneObjectManager obj_manager;

int main(int argc, char** argv) {

	// Use input parameters
	initScreenParameters(argc, argv);
	
	// Init GLFW
	if (!glfwInit()) {												// Init GLFW
		std::cout << "Failed to initialize GLFW\n" << std::endl;
		system("PAUSE");
		exit(-1);
	}

	// GLFW settings
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);					// OpenGL 4.0
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);	// Core profile
	glfwWindowHint(GLFW_RESIZABLE, GL_TRUE);						// Resizable window	
	
	// Get monitor
	GLFWmonitor* monitor = nullptr;
	if (fullscreen) {
		monitor = glfwGetPrimaryMonitor();
		glfwWindowHint(GLFW_REFRESH_RATE, refreshrate);               
	}

	// Open window
	GLFWwindow* window = glfwCreateWindow(width, height, "ExtremelyCrazyTuStress", monitor, NULL); 
	if (window == NULL){
		std::cout << "Failed to open GLFW window." << std::endl;
		glfwTerminate();
		exit(-1);
	}
	
	// Create OpenGL context
	glfwMakeContextCurrent(window); 

	// Get actual window size
	glfwGetWindowSize(window, &width, &height);

	// Init GLEW
	glewExperimental = true;										// Init GLEW
	if (glewInit() != GLEW_OK) {
		std::cout<<"Failed to initialize GLEW" << std::endl;
		exit(-1);
	}
	if (glewIsSupported("GL_VERSION_4_0")) {						// Check version support
		cout << "OpenGL version 4.0 supported" << endl;	
	}

	// Set cursor
	double screen_center_x = width / 2.0;
	double screen_center_y = height / 2.0;
	glfwSetCursorPos(window, screen_center_x,screen_center_y);		// Set cursor position for next frame


	// Capture key input after release
	glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);

	// Set backgroundcolor
	glClearColor(0.0, 0.0, 0.2, 0.5);

	// Viewport
	glViewport(0, 0, width, height);								

	// Init frametime
	float startTime = (float)glfwGetTime();
	float time_limit = 30.0f;
	float lastTime = (float)glfwGetTime();	
	float deltaTime, time_used;
	int frameCount = 0;

	// Init shader, scene objects and pipeline matrices
	init(window);

	// Render loop running condition
	bool isRunning = true;


	// ---------------------------------------------------------------------------------
	// --- RENDER LOOP ---
	// ---------------------------------------------------------------------------------
	while(isRunning)  { 

		// Calculate frametime
		deltaTime = (float)glfwGetTime()-lastTime;
		lastTime = (float)glfwGetTime();
		time_used = lastTime - startTime;
		frameCount++;

		// Clear screen and depth buffer
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		// Update
		update(window, deltaTime);

		if (player->getEnergyStatus() <= 0) {
			energy_out = true;
		}

		if (time_used >= time_limit) {
			time_out = true;
		}

		// Draw 
		draw();
		
		// Swap buffers
		glfwSwapBuffers(window);

		// Get window events
		glfwPollEvents();
		
		// Check if the ESC key was pressed or the window was closed
		isRunning = (glfwGetKey(window, GLFW_KEY_ESCAPE) != GLFW_PRESS) && (glfwWindowShouldClose(window) == 0 && !energy_out && !time_out);

	} // -------------------------------------------------------------------------------------Render-Loop end

	// Framerate info
	cout << endl;
	cout << (frameCount / (glfwGetTime() - startTime)) << " fps (" << frameCount << " frames, " << (glfwGetTime() - startTime) << "s)" << std::endl;
		
	
	// Game over due to time out
	if (time_out) {
		cout << endl;
		cout << "You reached the time limit!" << endl;
		if (player->getKnowledgeStatus() >= min_ECTS) {
			cout << "Congratulations!!! You won!" << endl;
		}
		else {
			cout << "GAME OVER!!! Sorry, you didn't collect enough ECTS points..." << endl;
		}			
	}
	// Game over due to lack of energy
	if (energy_out) {
		cout << "Sorry, you don't have enough energy left to go on..." << endl;
	}
	// Score
	cout << "Your score: " << endl;
	cout << "knowledge: " << player->getKnowledgeStatus() << endl;
	cout << "energy: " << player->getEnergyStatus() << endl;

	// Cleanup
	cleanup();

	// End GLFW
	glfwTerminate();

	system("PAUSE");

	exit(0);
}

void init(GLFWwindow* window) {

	// Window size
	int width, height;
	glfwGetWindowSize(window, &width, &height);

	// Visibility
	glEnable(GL_DEPTH_TEST);	// Depth test	
	glEnable(GL_CULL_FACE);		// Backface culling

	// Load and initialize shader
	tex_shader = new TextureShader("./Textures/fh-green-plain.png", vec3(0.1,0.1,0.0),vec3(0.0),1.0f);
	
	// Init scene objects
	light = new PointLight(translate(mat4(1.0),vec3(0.0,10.0,0.0)), vec3(1.0, 1.0, 1.0), 0.1f, 0.0f, 0.01f);// Init light
		
	tex_shader->useShader();
	demo_plane = new Plane(mat4(1.0), tex_shader);
	glUseProgram(0);

	SceneImporter s = *new SceneImporter();															  // Init Scene Importer
	
	// Import object
	vector<shared_ptr<Geometry>> plane_list = s.importFrom("./Models/gangy2.dae");
	for (shared_ptr<Geometry> p : plane_list){
		//p->setShader(tex_shader);															  // Set shader for each mesh							
		p->transformModelMatrix(scale(mat4(1.0), vec3(3.0, 1.0, 3.0))) ;	//TODO: modify! Set model matrix for each mesh
	}
	
	// Import object
	vector<shared_ptr<Geometry>> lerpz_list = s.importFrom("./Models/lerpz_blinn.dae");
	for (unsigned int i = 0; i < lerpz_list.size(); i++){
		lerpz_list[i]->setShader(new NormalShader());															  // Set shader for each mesh							
		lerpz_list[i]->transformModelMatrix(translate(scale(mat4(1.0), vec3(2.0)), vec3(-2.5, 0.0, -2.0)));	// TODO: modify! Set model matrix for each mesh
	}

	// Import object
	vector<shared_ptr<Geometry>> diamond_list = s.importFrom("./Models/diamond.dae");
	for (shared_ptr<Geometry> d : diamond_list){
		d->setShader(new NormalShader());															  // Set shader for each mesh							
		d->transformModelMatrix(translate(scale(mat4(1.0), vec3(0.6, 0.6, 0.6)), vec3(0.0, 4.0, -15.0)));	// TODO: modify! Set model matrix for each mesh
	}

	// Import object
	vector<shared_ptr<Geometry>> e_list = s.importFrom("./Models/diamond.dae");
	for (shared_ptr<Geometry> e : e_list){
		e->setShader(new BlinnPhongShader(vec3(0.5, 0.5, 0.0), vec3(0.9f, 0.7f, 0.7f), vec3(1.0f, 1.0f, 0.0f), 5.0f));															  // Set shader for each mesh							
		e->transformModelMatrix(translate(scale(mat4(1.0), vec3(0.6, 0.6, 0.6)), vec3(0.0, 4.0, 10.0)));	// TODO: modify! Set model matrix for each mesh
	}

	// Import object
	vector<shared_ptr<Geometry>> duck_list = s.importFrom("./Models/duck.dae");
	for (shared_ptr<Geometry> d : duck_list){
		d->setShader(new BlinnPhongShader(vec3(0.3, 0.3, 0.), vec3(0.7f, 0.7f, 0.5f), vec3(0.0f, 1.0f, 0.0f), 20.0f));														  // Set shader for each mesh							
		d->transformModelMatrix(translate(mat4(1.0), vec3(0.0,1.0,0.0)));	// TODO: modify! Set model matrix for each mesh
	}

<<<<<<< HEAD
	//Import object
	vector<shared_ptr<Geometry>> earth_list = s.importFrom("./Models/Earth/Earth.dae");

	//Import object
	vector<shared_ptr<Geometry>> car_list = s.importFrom("./Models/Car Audi R8 2006 N250211.3DS");

	//Import object
	vector<shared_ptr<Geometry>> chair_list = s.importFrom("./Models/black chair/black chair.dae");

	//Import object
	vector<shared_ptr<Geometry>> chair_list_OBJ = s.importFrom("./Models/black chair/black chair.obj");




	// Import object
	vector<shared_ptr<Geometry>> fh_list = s.importFrom("./Models/freihaus_v0_2.dae");
	for (shared_ptr<Geometry> f : fh_list){
		f->setShader(new BlinnPhongShader(vec3(0.5, 0.5, 0.0), vec3(0.7f, 0.6f, 0.7f), vec3(1.0f, 1.0f, 0.0f), 20.0f));															  // Set shader for each mesh							
		f->transformModelMatrix(translate(mat4(1.0), vec3(2.0, 0.0, 0.0)));	// TODO: modify! Set model matrix for each mesh
	}
=======
	//// Import object
	//vector<shared_ptr<Geometry>> fh_list = s.importFrom("./Models/freihaus_v0_2.dae");
	//for (shared_ptr<Geometry> f : fh_list){
	//	f->setShader(new BlinnPhongShader(vec3(0.5, 0.5, 0.0), vec3(0.7f, 0.6f, 0.7f), vec3(1.0f, 1.0f, 0.0f), 20.0f));															  // Set shader for each mesh							
	//	f->transformModelMatrix(translate(mat4(1.0), vec3(2.0, 0.0, 0.0)));	// TODO: modify! Set model matrix for each mesh
	//}
>>>>>>> 94de09a9530195797f2f832298b8e4f173c5cc8a

	


	// Add geometry objects to list
	shared_ptr<Environment> plane = make_shared<Environment>(plane_list[0]->model_matrix, plane_list[0]->meshes);
	environment.push_back(plane);
	shared_ptr<Knowledge> first_item = make_shared<Knowledge>(diamond_list[0]->model_matrix, diamond_list[0]->meshes, 5);
	k_items.push_back(first_item);
	shared_ptr<Energy> second_item = make_shared<Energy>(e_list[0]->model_matrix, e_list[0]->meshes, 10);
	e_items.push_back(second_item);
	shared_ptr<Student> first_student = make_shared<Student>(duck_list[0]->model_matrix, duck_list[0]->meshes);
	students.push_back(first_student);
	
	// Init player and camera
	mat4 model_player = translate(mat4(1.0), vec3(0.0, 5.0, 20.0));
	player = new Player(window, model_player, lerpz_list[0]->meshes);					 
	camera = player->camera;

	// Projection matrices
	camera->setProjMatrix(width, height, 45.0f, 0.1f, 200.0f);
	view_proj = camera->proj_matrix * camera->view_matrix();

	// Init physics and set Object lists
	physics.setPlayer(player);
	physics.setItems(&k_items, &e_items);
	physics.setStudents(make_shared<vector<shared_ptr<Student>>>(students));
	physics.setRadius(2.5f);
	// TODO include environment in physics

	// Init scene object manager
	obj_manager.setObjects(light, player, &environment, &students, &k_items, &e_items);

	// Bind info to texture shader
	tex_shader->useShader();
	tex_shader->setLighting(light); 
	auto view_proj_location = glGetUniformLocation(tex_shader->programHandle, "view_proj");
	glUniformMatrix4fv(view_proj_location, 1, GL_FALSE, glm::value_ptr(view_proj));
	auto camera_coords_location = glGetUniformLocation(tex_shader->programHandle, "camera_coords");
	glUniform3fv(camera_coords_location, 1, glm::value_ptr(camera->camera_location()));
	glUseProgram(0);

	// Bind info to individual mesh shaders
	obj_manager.setViewProj();
	obj_manager.setLighting(light);
	obj_manager.setCameraLoc();
	
	
}
void update(GLFWwindow* window, float deltaTime) {
	
	demo_plane->update(deltaTime);
	obj_manager.update(deltaTime);		// Use individual mesh shaders
	physics.detectCollision();			// Collision detection

	// Bind update info to tex shader
	tex_shader->useShader();
	view_proj = camera->proj_matrix * camera->view_matrix();
	auto view_proj_location = glGetUniformLocation(tex_shader->programHandle, "view_proj");
	glUniformMatrix4fv(view_proj_location, 1, GL_FALSE, glm::value_ptr(view_proj));
	auto camera_coords_location = glGetUniformLocation(tex_shader->programHandle, "camera_coords");
	glUniform3fv(camera_coords_location, 1, glm::value_ptr(camera->camera_location()));
	glUseProgram(0);

	// Bind update info to object shaders
	obj_manager.setViewProj();
	obj_manager.setCameraLoc();

}

void draw() {
	
	// Use texture shader program
	tex_shader->useShader();
	tex_shader->bindTexture(0);
	demo_plane->draw();
	glUseProgram(0);// Deactivate shader

	// Use individual mesh shaders
	obj_manager.draw();
}
void cleanup() {
	delete tex_shader; tex_shader = nullptr;	// Delete texture shader
	delete light; light = nullptr;				// Delete light
	delete camera; camera = nullptr;			// Delete camera
	delete player; player = nullptr;			// Delete player
	delete demo_plane; demo_plane = nullptr;	// Delete plane
}

/*
Set screen parameters from command line arguments.
First parameter in argv (argv[1]) is the width, second is height, third is the refresh rate, fourth is fullscreen.
If there are no parameters, the default configuration will not be affected.
*/
void initScreenParameters(int argc, char** argv){
	if (argc >= 3){
		if ((stringstream(argv[1]) >> width).fail()) {
			cout << "Error: First command-line argument has to be of type integer" << endl;
			system("PAUSE");
			exit(-1);
		}
		if ((stringstream(argv[2]) >> height).fail()) {
			cout << "Error: Second command-line argument has to be of type integer" << endl;
			system("PAUSE");
			exit(-1);
		}
	}
	if (argc >= 4){
		if ((stringstream(argv[3]) >> refreshrate).fail()) {
			cout << "Error: Third command-line argument has to be of type integer" << endl;
			system("PAUSE");
			exit(-1);
		}
	}
	if (argc >= 5){
		if((stringstream(argv[4]) >> fullscreen).fail()) {
			cout << "Error: Fourth command-line argument has to be of type integer" << endl;
			system("PAUSE");
			exit(-1);
		}
	}

	std::cout << "width=" << width << ", height=" << height << ", refreshrate=" << refreshrate << ", fullscreen=" << fullscreen << std::endl;
}

